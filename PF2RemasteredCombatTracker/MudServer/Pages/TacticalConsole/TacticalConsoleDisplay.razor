@page "/tactical-console"
@using MudServer.Common.Enums;

@inject ICharacterCodexService CharacterCodexService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3">TacticalConsoleDisplay</MudText>

<MudSelect Multiple="true" T="int" Label="Select characters" @bind-Value="lastSelectedIndex" Placeholder=" ">
    <MudSelectItem Value="-1" Disabled="true" Hidden="true"></MudSelectItem>
    @foreach (var character in allCharacters)
    {
        <MudSelectItem Value="@allCharacters.IndexOf(character)">@character.CreatureName</MudSelectItem>
    }
</MudSelect>

<MudButton OnClick="AddSelectedCharacters">Add Selected Characters</MudButton>
<MudDivider DividerType="DividerType.Inset" Style="margin: 25px;" />

<MudItem Style="margin-bottom: 25px">
    <MudButton OnClick="StartNewCombat" Color="Color.Primary">New Combat</MudButton>
    <MudButton OnClick="ResetBattle" Variant="Variant.Outlined" Color="Color.Secondary">Reset Battle</MudButton>
</MudItem>

@if (showCombatControls)
{
    <div class="d-flex align-items-center mt-3">
        <MudTextField @bind-Value="currentRound" ReadOnly="true" Variant="Variant.Outlined" Class="ml-2" Label="Combat Round" />
        <MudButton OnClick="GoToNextRound" Class="ml-2" Variant="Variant.Outlined">Next Round</MudButton>
    </div>

    <MudDivider DividerType="DividerType.Inset" Style="margin: 25px;" />
}

@foreach (var tacticalCharacter in tacticalCharacters)
{
    <div class="d-flex align-items-center border py-2" style="padding: 5px">
        <MudTextField Value="@tacticalCharacter.OriginalCharacter.CreatureName"
                      ReadOnly="true"
                      Variant="Variant.Outlined"
                      Label="Name"
                      Style="@(tacticalCharacter.IsFoe ? "color: red;" : "color: darkblue;")" />

        @* <MudTextField Value="@tacticalCharacter.OriginalCharacter.CreatureName" ReadOnly="true" Variant="Variant.Outlined" Label="Name" /> *@
        <MudTextField Value="@tacticalCharacter.OriginalCharacter.AC" ReadOnly="true" Variant="Variant.Outlined" Label="AC" Class="ml-2" Style="width: 80px;" />
        <MudTextField Value="@tacticalCharacter.OriginalCharacter.HP.ToString()" ReadOnly="true" Variant="Variant.Outlined" Label="HP" Class="ml-2" Style="width: 80px;" />

        <MudNumericField @bind-Value="tacticalCharacter.OriginalCharacter.HPCurrent"
                         Label="Current HP"
                         Variant="Variant.Outlined"
                         Class="@GetCurrentHPClass(tacticalCharacter)"
                         Style="@GetHPTexColor(tacticalCharacter)" />


        @* <MudNumericField @bind-Value="tacticalCharacter.OriginalCharacter.HPCurrent" Label="Current HP" Variant="Variant.Outlined" Class="@GetCurrentHPClass(tacticalCharacter)" Style="width: 80px;" /> *@
        <MudNumericField @bind-Value="tacticalCharacter.Initiative" Label="Initiative" Variant="Variant.Outlined" Max="99" Min="0" Class="ml-2" Style="width: 80px;" />
        <MudSwitch @bind-Checked="tacticalCharacter.IsFoe" Label="Foe" Class="ml-2" />
        <MudButton OnClick="() => DuplicateCharacter(tacticalCharacter)" Class="ml-2">Duplicate</MudButton>
        <MudButton Color="Color.Error" OnClick="() => RemoveCharacter(tacticalCharacter)" Class="ml-2">Remove</MudButton>

        @if (tacticalCharacter.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dying)
        {
            <MudButton OnClick="() => StabilizeCombatant(tacticalCharacter, true)" Class="ml-2" Color="Color.Success">Stabilize</MudButton>
        }
    </div>
}


<MudPaper Class="battle-log">
    <MudText Typo="Typo.h4">Battle Log</MudText>
    <MudList>
        @foreach (var log in BattleLog)
        {
            var logType = GetLogType(log);
            <MudListItem Class="@logType">
                @if (log.StartsWith("Combat Round #"))
                {
                    <span style="font-weight: bold; text-decoration: underline;">@log</span>
                }
                else
                {
                    @log
                }
            </MudListItem>
        }
    </MudList>
</MudPaper>


@* <MudPaper Class="battle-log">
    <MudText Typo="Typo.h4">Battle Log</MudText>
    <MudList>
        @foreach (var log in BattleLog)
        {
            var logType = GetLogType(log);
            <MudListItem Class="@logType">
                @log
            </MudListItem>
        }
    </MudList>
</MudPaper>
 *@
@* <div class="battle-log">
    <h4>Battle Log</h4>
    <ul>
        @foreach (var log in BattleLog)
        {
            var logType = GetLogType(log);
            <li class="@logType">@log</li>
        }
    </ul>

</div>
 *@
@code {

    private List<CharacterCodex> allCharacters = new List<CharacterCodex>();
    private List<TacticalCharacter> tacticalCharacters = new List<TacticalCharacter>();
    private List<CharacterCodex> selectedCharacters = new List<CharacterCodex>();

    private int lastSelectedIndex {
        get => _lastSelectedIndex;
        set {
            if (value == -1) return; // Ignore -1 values
            _lastSelectedIndex = value;
            if (!selectedIndices.Contains(value))
            {
                selectedIndices.Add(value);
            }
            else
            {
                selectedIndices.Remove(value);
            }
            UpdateSelectedCharacters();
        }
    }

    private int _lastSelectedIndex = -1;
    private List<int> selectedIndices = new List<int>();
    private Dictionary<string, int> characterDuplicationCounts = new Dictionary<string, int>();

    // Variables to control combat rounds UI
    private bool showCombatControls = false;
    private string currentRound = "Round 1";
    private int roundCounter = 1;
    private string ReadOnly { get; set; } = "Read Only";
    private List<string> BattleLog = new List<string>();
    private bool battleInProgress = false;

    protected override async Task OnInitializedAsync()
    {
        allCharacters = (await CharacterCodexService.GetAllAsync()).OrderBy(c => c.CreatureName).ToList();
    }

    private void AddSelectedCharacters()
    {
        foreach (var character in selectedCharacters)
        {
            tacticalCharacters.Add(new TacticalCharacter { OriginalCharacter = character, IsFoe = false });
        }
        selectedIndices.Clear();  // Clear selected indices after adding characters.
        lastSelectedIndex = -1;  // Reset last selected index.
    }

    private void UpdateSelectedCharacters()
    {
        selectedCharacters = selectedIndices.Where(i => i >= 0 && i < allCharacters.Count).Select(i => allCharacters[i]).ToList();
    }

    private void RemoveCharacter(TacticalCharacter characterToRemove)
    {
        tacticalCharacters.Remove(characterToRemove);
        StateHasChanged(); // Optional: To refresh the component and reflect the change in UI.
    }

    private void DuplicateCharacter(TacticalCharacter character)
    {
        // Get the base name of the character (without the # and number)
        var baseName = character.OriginalCharacter.CreatureName.Split('#')[0].Trim();

        // Increment the count for this character in the dictionary
        if (characterDuplicationCounts.ContainsKey(baseName))
        {
            characterDuplicationCounts[baseName]++;
        }
        else
        {
            characterDuplicationCounts[baseName] = 1; // This is the first duplicate
        }

        // Create a deep copy of the original character
        var copiedCharacter = DeepCopyCharacterCodex(character.OriginalCharacter);
        copiedCharacter.CreatureName = $"{baseName} #{characterDuplicationCounts[baseName]}";

        // Create a clone of the TacticalCharacter and adjust its OriginalCharacter
        var clone = new TacticalCharacter
            {
                OriginalCharacter = copiedCharacter,
                IsFoe = character.IsFoe,
                Initiative = character.Initiative
            };
        tacticalCharacters.Add(clone);
    }


    private CharacterCodex DeepCopyCharacterCodex(CharacterCodex original)
    {
        var copiedCharacter = new CharacterCodex(original.CreatureName, new List<Weapon>(original.Weapons))
            {
                Id = original.Id,
                HP = original.HP,
                HPCurrent = original.HPCurrent,
                AC = original.AC,
                AttackBonusMelee = original.AttackBonusMelee,
                AttackBonusRanged = original.AttackBonusRanged
            };
        return copiedCharacter;
    }

    private void SortTacticalCharacters()
    {
        tacticalCharacters = tacticalCharacters
            .OrderByDescending(tc => tc.Initiative)
            .ThenBy(tc => tc.OriginalCharacter.CreatureName)
            .ToList();
    }

    private void StartNewCombat()
    {
        showCombatControls = true;
        roundCounter = 1;
        battleInProgress = true;

        BattleLog.Clear();  // Clear the log first
        BattleLog.Add($"Combat Round #{roundCounter}");  // Then add the entry for the first round

        currentRound = $"Round {roundCounter}";
        SortTacticalCharacters();
        SimulateBattle();
    }


    private void GoToNextRound()
    {
        roundCounter++;
        currentRound = $"Round {roundCounter}";
        BattleLog.Add($"Combat Round #{roundCounter}");  // This line records the start of a new combat round
        SortTacticalCharacters();
        SimulateBattle(); // This will run the battle simulation for the next round.
    }

    private void SimulateBattle()
    {
        List<CharacterCodex> newlyDyingThisRound = new List<CharacterCodex>();

        foreach (var combatant in tacticalCharacters)
        {
            if (SkipAction(combatant)) continue;

            var enemy = FindEnemy(combatant);
            if (enemy == null) continue;

            PerformAttack(combatant, enemy, newlyDyingThisRound);
        }

        TryStabilizeDyingCharacters(newlyDyingThisRound);

        if (CheckBattleEndCondition())
        {
            BattleLog.Add("The battle has ended.");
            battleInProgress = false;
        }

        StateHasChanged();
    }

    private bool SkipAction(TacticalCharacter combatant)
    {
        var status = combatant.OriginalCharacter.CurrentHealthStatus;
        if (status == HealthStatus.Dead || status == HealthStatus.Dying || status == HealthStatus.Stable)
        {
            return true;
        }
        return false;
    }

    private TacticalCharacter? FindEnemy(TacticalCharacter combatant)
    {
        return combatant.IsFoe
            ? tacticalCharacters.Where(c => !c.IsFoe && c.OriginalCharacter.CurrentHealthStatus != HealthStatus.Dead && c.OriginalCharacter.CurrentHealthStatus != HealthStatus.Dying && c.OriginalCharacter.CurrentHealthStatus != HealthStatus.Stable).OrderBy(_ => Guid.NewGuid()).FirstOrDefault()
            : tacticalCharacters.Where(c => c.IsFoe && c.OriginalCharacter.CurrentHealthStatus != HealthStatus.Dead && c.OriginalCharacter.CurrentHealthStatus != HealthStatus.Dying && c.OriginalCharacter.CurrentHealthStatus != HealthStatus.Stable).OrderBy(_ => Guid.NewGuid()).FirstOrDefault();
    }

    private void PerformAttack(TacticalCharacter attacker, TacticalCharacter defender, List<CharacterCodex> newlyDyingThisRound)
    {
        if (defender.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dead ||
        defender.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dying ||
        defender.OriginalCharacter.CurrentHealthStatus == HealthStatus.Stable)
        {
            // If the defender is Dead, Dying or Stabilized, do not attack them
            BattleLog.Add($"{attacker.OriginalCharacter.CreatureName} cannot attack {defender.OriginalCharacter.CreatureName} because they are {defender.OriginalCharacter.CurrentHealthStatus}.");
            return;
        }

        foreach (var weapon in attacker.OriginalCharacter.Weapons)
        {
            int attackBonus = weapon.IsMelee ? attacker.OriginalCharacter.AttackBonusMelee : attacker.OriginalCharacter.AttackBonusRanged;
            var attackRoll = RollD20() + attackBonus;
            int damageBonus = weapon.IsMelee ? attacker.OriginalCharacter.BonusDamageMelee : attacker.OriginalCharacter.BonusDamageRanged;

            if (attackRoll == 20 || attackRoll >= defender.OriginalCharacter.AC + 9) // Critical Hit
            {
                var damage = (RollDamage(weapon.DamageDie, weapon.DamageDieCount) + weapon.DamageBonus + damageBonus) * 2;
                defender.OriginalCharacter.HPCurrent -= damage;
                BattleLog.Add($"{attacker.OriginalCharacter.CreatureName} critically hit {defender.OriginalCharacter.CreatureName} for {damage} damage!");
            }
            else if (attackRoll >= defender.OriginalCharacter.AC) // Hit
            {
                var damage = RollDamage(weapon.DamageDie, weapon.DamageDieCount) + weapon.DamageBonus + damageBonus;
                defender.OriginalCharacter.HPCurrent -= damage;
                BattleLog.Add($"{attacker.OriginalCharacter.CreatureName} hit {defender.OriginalCharacter.CreatureName} for {damage} damage!");
            }
            else // Miss
            {
                BattleLog.Add($"{attacker.OriginalCharacter.CreatureName} missed {defender.OriginalCharacter.CreatureName}!");
            }
        }

        UpdateHealthStatus(defender, newlyDyingThisRound);
    }

    private void UpdateHealthStatus(TacticalCharacter defender, List<CharacterCodex> newlyDyingThisRound)
    {
        if (defender.OriginalCharacter.HPCurrent <= -10 && defender.OriginalCharacter.CurrentHealthStatus != HealthStatus.Dead)
        {
            defender.OriginalCharacter.CurrentHealthStatus = HealthStatus.Dead;
            BattleLog.Add($"{defender.OriginalCharacter.CreatureName} has died from their wounds.");
        }
        else if (defender.OriginalCharacter.HPCurrent < 0 && defender.OriginalCharacter.CurrentHealthStatus == HealthStatus.Healthy)
        {
            defender.OriginalCharacter.CurrentHealthStatus = HealthStatus.Dying;
            newlyDyingThisRound.Add(defender.OriginalCharacter);
            BattleLog.Add($"{defender.OriginalCharacter.CreatureName} has fallen in battle.");
        }
    }

    private bool CheckBattleEndCondition()
    {
        var foesStatus = tacticalCharacters
            .Where(c => c.IsFoe)
            .All(c => c.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dead
                      || c.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dying
                      || c.OriginalCharacter.CurrentHealthStatus == HealthStatus.Stable);

        var alliesStatus = tacticalCharacters
            .Where(c => !c.IsFoe)
            .All(c => c.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dead
                      || c.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dying
                      || c.OriginalCharacter.CurrentHealthStatus == HealthStatus.Stable);

        return foesStatus || alliesStatus;
    }

    private int RollD20()
    {
        var rand = new Random();
        return rand.Next(1, 21);
    }

    private int RollDamage(int die, int count)
    {
        var rand = new Random();
        int total = 0;
        for (int i = 0; i < count; i++)
        {
            total += rand.Next(1, die + 1);
        }
        return total;
    }

    private string GetLogType(string log)
    {
        if (log.Contains("critically hit")) return "critical-hit";
        if (log.Contains("hit")) return "hit";
        if (log.Contains("missed") && !log.Contains("critically")) return "miss";
        if (log.Contains("critically missed")) return "critical-failure";
        return "";
    }

    private string GetCurrentHPClass(TacticalCharacter tacticalCharacter)
    {
        return tacticalCharacter.OriginalCharacter.HPCurrent <= tacticalCharacter.OriginalCharacter.HP * 0.25 ? "ml-2 low-health" : "ml-2";
    }

    private void TryStabilizeDyingCharacters(List<CharacterCodex> newlyDyingThisRound)
    {
        foreach (var combatant in tacticalCharacters.Where(c => c.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dying))
        {
            if (!newlyDyingThisRound.Contains(combatant.OriginalCharacter))
            {
                // 50% chance to fail stabilization
                if (RollD20() < 10)
                {
                    // Failed to stabilize, decrease HP by 1
                    combatant.OriginalCharacter.HPCurrent -= 1;
                    BattleLog.Add($"{combatant.OriginalCharacter.CreatureName} failed to stabilize and lost 1 HP.");

                    // Check if the character is dead
                    if (combatant.OriginalCharacter.HPCurrent <= -10)
                    {
                        combatant.OriginalCharacter.CurrentHealthStatus = HealthStatus.Dead;
                        BattleLog.Add($"{combatant.OriginalCharacter.CreatureName} has died from their wounds.");
                    }
                }
                else
                {
                    // Successfully stabilized
                    StabilizeCombatant(combatant, false);
                }
            }
        }
    }

    private void StabilizeCombatant(TacticalCharacter combatant, bool isManual)
    {
        combatant.OriginalCharacter.CurrentHealthStatus = HealthStatus.Stable;

        if (isManual)
        {
            BattleLog.Add($"{combatant.OriginalCharacter.CreatureName} has been stabilized by an unknown entiy and is now unconscious but stable.");
        }
        else
        {
            BattleLog.Add($"{combatant.OriginalCharacter.CreatureName} has been stabilized and is now unconscious but stable.");
        }
    }

    private void ResetBattle()
    {
        // Reset each combatant's state to default
        foreach (var combatant in tacticalCharacters)
        {
            combatant.OriginalCharacter.HPCurrent = combatant.OriginalCharacter.HP;
            combatant.OriginalCharacter.CurrentHealthStatus = HealthStatus.Healthy;
        }

        // Clear the BattleLog
        BattleLog.Clear();

        // Reset round counter and other related data
        roundCounter = 1;
        currentRound = $"Round {roundCounter}";
        battleInProgress = false;
        showCombatControls = false;  // Hide combat controls if you want to

        StateHasChanged();  // Update the UI to reflect the changes
    }

    public string GetHPTexColor(TacticalCharacter tacticalCharacter)
    {
        if (tacticalCharacter.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dying)
            return "color: red;";
        if (tacticalCharacter.OriginalCharacter.CurrentHealthStatus == HealthStatus.Dead)
            return "color: gray;";
        if (tacticalCharacter.OriginalCharacter.CurrentHealthStatus == HealthStatus.Stable)
            return "color: orange;";

        double currentHp = tacticalCharacter.OriginalCharacter.HPCurrent;
        double maxHp = tacticalCharacter.OriginalCharacter.HP;
        double percent = (currentHp / maxHp) * 100;

        if (percent >= 76)
            return "color: green;";
        if (percent >= 51)
            return "color: yellowgreen;";
        if (percent >= 26)
            return "color: yellow;";
        return "color: red;";
    }

    // bool IsCreatureAFoe(string creatureName)
    // {
    //     return tacticalCharacters?.Any(tc => tc.OriginalCharacter.CreatureName == creatureName && tc.IsFoe) ?? false;
    // }
}